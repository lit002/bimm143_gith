---
title: "Class 13: RNASeq Analysis"
author: "Linh Tran (PID:A16435846)"
format: pdf
---
## Goal

The data for today's lab comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects

## Import Data

We need two things dor this analysis: counts and metadata these are called "countData: and "colData" in the DESeq2 world.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")

```
 
```{r}
head(counts)
```
The counts are organized with a gene per row and experiment per column.
```{r}
head(metadata)
```


>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


>Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
```
Or we can do

```{r}
table(metadata$dex)
```


## Examine Data

### Check in match of metadata and coldata

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id

```

If you want to know that all the elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T,T,T))
```

```{r}
all( colnames(counts)== metadata$id)
```

## Analysis

I want to start by comparing "control" and "treated" columns. To this I will first find the average for each gene(row) in all "control" columns. Then I will find the average in the "treated" columns. Then I will compare them.

Let's extract all "control" columns first

```{r}
control.inds <- metadata$dex =="control"
```

```{r}
control.counts <- counts[,control.inds]
```

Now find the mean count value per gene using the `apply()` function.

```{r}
control.mean <- apply(control.counts, 1, mean)
```

Now do the same for the "treated" columns i.e. find `treated.mean`


```{r}
treated.inds <- metadata$dex =="treated"

treated.counts <- counts[,treated.inds]

treated.mean <- apply(treated.counts, 1, mean)
```

Put everything together
```{r}
treated.mean <- apply(counts[,metadata$dex == "treated"], 1, mean)
```


```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Let's have a wee look with a quick plot

```{r}
plot(meancounts)
```
```{r}
plot(meancounts, log="xy")
```
Exploring log

```{r}
log2(10/10)
```

```{r}
log2(20/10)
```

```{r}
log2(10/20)
```

We most often work in log2 units because they have a more simple interpretation.

Here we calculate the log2 Fold-change of treated/control values and add it to our wee data frame of results

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

There are some funky answers in here like NaN (Not a number) and -Inf (minus infinity) that all come because I have zero count genes in my dataset.

It's common practice to filter thses zero count genes out before we go too deep.

```{r}
to.keep.inds <- (rowSums(meancounts[,1:2]== 0)==0)
mycounts <- meancounts[to.keep.inds,]
head(mycounts)
```

>Q. How many genes do we have left after zero count filtering?

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" is a log2 fold change of +2 or -2

>Q. How many "up" regulated genes do we have?

```{r}
sum(mycounts$log2fc>= +2)
```

## DESeq analysis

We need to do this analysis properly with our inner stats person kept happy.

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need to get our input data in very particular format.

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts,
                       colData=metadata,
                       design= ~dex)
```

Run DESeq an analysis
```{r}
dds <- DESeq(dds)
```

Get the results
```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date.
A plot of **log2 fold change** vs the **p-value** (adjusted p-value)

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
log(0.5)
log(0.00005)
```

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(-2,2), col="darkgray")
abline(h=log(0.05), col="gray")
```

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red"
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
plot(res$log2FoldChange, -log(res$padj), col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
abline(v=c(-2,2), col="darkgray")
abline(h=log(0.05), col="gray")
```

## Add Annotation Data

We want to add on gene symbols (i.e. gene names) and other common identifiers

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

My IDs are in the `rownames(res)` and they are from ENSEMBL
```{r}

res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```

We also want "GENENAME" and "ENTREZID"

```{r}

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")

res$entrez<- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
head(res)
```

Let's save our results to a new CSV file

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway 

here we will use the "gage" package to do some 

```{r}
#| message: false
library(pathview)
library(gage)
library(gageData)

```

```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs,2)
```


To run gage we need to provide it with a vector of fold-change values (not our big full results table)

```{r}
foldchanges = res$log2FoldChange
#foldchanges
```

Add the ENTREZ ids as names to this vector.

```{r}
c(chan=10,alice=9, bunny=7)
```

or we can do 
```{r}
x <-  c(20,9,7)

names(x)
```

Add EMTREZ ids as names to my foldchanges vector

```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

Now run **gage** with this input and the KEGG pathways

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```


Let's have a look at he hsa05310 Asthma pathways with our genes highlighted using the `pathview()` function:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![Figure 1. Asthma pathway](hsa05310.pathview.png)



























